// <auto-generated />
using System;
using KarmaWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KarmaWebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250509154114_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KarmaWebAPI.Models.Alumne", b =>
                {
                    b.Property<string>("NIA")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Actiu")
                        .HasColumnType("bit");

                    b.Property<string>("Cognoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NIA");

                    b.ToTable("Alumne");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.AlumneEnGrup", b =>
                {
                    b.Property<int>("IdAlumneEnGrup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlumneEnGrup"));

                    b.Property<int>("IdAnyEscolar")
                        .HasColumnType("int");

                    b.Property<string>("IdGrup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Karma")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NIA")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PuntuacioTotal")
                        .HasColumnType("int");

                    b.HasKey("IdAlumneEnGrup");

                    b.HasIndex("NIA");

                    b.HasIndex("IdAnyEscolar", "IdGrup");

                    b.ToTable("AlumneEnGrup");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.AnyEscolar", b =>
                {
                    b.Property<int>("IdAnyEscolar")
                        .HasColumnType("int");

                    b.Property<bool>("Actiu")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("DataFiCurs")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataIniciCurs")
                        .HasColumnType("date");

                    b.Property<int>("DiesPeriode")
                        .HasColumnType("int");

                    b.HasKey("IdAnyEscolar");

                    b.ToTable("AnyEscolar");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.ConfiguracioKarma", b =>
                {
                    b.Property<int>("IdConfiguracioKarma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConfiguracioKarma"));

                    b.Property<string>("ColorNivell")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAnyEscolar")
                        .HasColumnType("int");

                    b.Property<int>("KarmaMaxim")
                        .HasColumnType("int");

                    b.Property<int>("KarmaMinim")
                        .HasColumnType("int");

                    b.Property<int>("NivellPrivilegis")
                        .HasColumnType("int");

                    b.HasKey("IdConfiguracioKarma");

                    b.HasIndex("IdAnyEscolar");

                    b.ToTable("ConfiguracioKarma");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Grup", b =>
                {
                    b.Property<int>("IdAnyEscolar")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("IdGrup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("Descripcio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IdProfessorTutor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KarmaBase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAnyEscolar", "IdGrup");

                    b.HasIndex("IdProfessorTutor");

                    b.ToTable("Grup");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Materia", b =>
                {
                    b.Property<int>("IdMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMateria"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMateria");

                    b.ToTable("Materia");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Periode", b =>
                {
                    b.Property<int>("IdPeriode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPeriode"));

                    b.Property<DateOnly>("DataFi")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataInici")
                        .HasColumnType("date");

                    b.Property<int>("IdAnyEscolar")
                        .HasColumnType("int");

                    b.HasKey("IdPeriode");

                    b.HasIndex("IdAnyEscolar");

                    b.ToTable("Periode");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Privilegi", b =>
                {
                    b.Property<int>("IdPrivilegi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrivilegi"));

                    b.Property<string>("Descripcio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EsIndividualGrup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAnyEscolar")
                        .HasColumnType("int");

                    b.Property<int>("Nivell")
                        .HasColumnType("int");

                    b.HasKey("IdPrivilegi");

                    b.HasIndex("IdAnyEscolar");

                    b.ToTable("Privilegi");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.PrivilegiAssignat", b =>
                {
                    b.Property<int>("IdPrivilegiAssignat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrivilegiAssignat"));

                    b.Property<DateOnly>("DataAssignacio")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataExecucio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EsIndividualGrup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAlumneEnGrup")
                        .HasColumnType("int");

                    b.Property<int>("IdPrivilegi")
                        .HasColumnType("int");

                    b.Property<int>("Nivell")
                        .HasColumnType("int");

                    b.HasKey("IdPrivilegiAssignat");

                    b.HasIndex("IdAlumneEnGrup");

                    b.HasIndex("IdPrivilegi");

                    b.ToTable("PrivilegiAssignat");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Professor", b =>
                {
                    b.Property<string>("IdProfessor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Actiu")
                        .HasColumnType("bit");

                    b.Property<string>("Cognoms")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdProfessor");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.ProfessorDeGrup", b =>
                {
                    b.Property<int>("IdProfessorDeGrup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessorDeGrup"));

                    b.Property<int>("IdAnyEscolar")
                        .HasColumnType("int");

                    b.Property<string>("IdGrup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdMateria")
                        .HasColumnType("int");

                    b.Property<string>("IdProfessor")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdProfessorDeGrup");

                    b.HasIndex("IdMateria");

                    b.HasIndex("IdProfessor");

                    b.HasIndex("IdAnyEscolar", "IdGrup");

                    b.ToTable("ProfessorDeGrup");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Puntuacio", b =>
                {
                    b.Property<int>("IdPuntuacio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPuntuacio"));

                    b.Property<DateOnly>("DataEntrada")
                        .HasColumnType("date");

                    b.Property<int>("IdAlumneEnGrup")
                        .HasColumnType("int");

                    b.Property<int?>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdPeriode")
                        .HasColumnType("int");

                    b.Property<string>("Motiu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Punts")
                        .HasColumnType("int");

                    b.Property<string>("UsuariCreacio")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPuntuacio");

                    b.HasIndex("IdAlumneEnGrup");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdPeriode");

                    b.ToTable("Puntuacio");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.VPrivilegiPeriode", b =>
                {
                    b.Property<int>("AlumneEnGrupIdAlumneEnGrup")
                        .HasColumnType("int");

                    b.Property<int>("IdAlumneEnGrup")
                        .HasColumnType("int");

                    b.Property<int>("IdPeriode")
                        .HasColumnType("int");

                    b.Property<int>("IdPrivilegi")
                        .HasColumnType("int");

                    b.Property<int>("PeriodeIdPeriode")
                        .HasColumnType("int");

                    b.Property<int>("PrivilegiIdPrivilegi")
                        .HasColumnType("int");

                    b.HasIndex("AlumneEnGrupIdAlumneEnGrup");

                    b.HasIndex("PeriodeIdPeriode");

                    b.HasIndex("PrivilegiIdPrivilegi");

                    b.ToTable((string)null);

                    b.ToView("VPrivilegiPeriode", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KarmaWebAPI.Models.AlumneEnGrup", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AnyEscolar", "AnyEscolar")
                        .WithMany("AlumnesEnGrup")
                        .HasForeignKey("IdAnyEscolar")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Alumne", "Alumne")
                        .WithMany("AlumneEnGrups")
                        .HasForeignKey("NIA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Grup", "Grup")
                        .WithMany("AlumnesEnGrup")
                        .HasForeignKey("IdAnyEscolar", "IdGrup")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Alumne");

                    b.Navigation("AnyEscolar");

                    b.Navigation("Grup");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.ConfiguracioKarma", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AnyEscolar", "AnyEscolar")
                        .WithMany("ConfiguracionsKarma")
                        .HasForeignKey("IdAnyEscolar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnyEscolar");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Grup", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AnyEscolar", "AnyEscolar")
                        .WithMany("Grups")
                        .HasForeignKey("IdAnyEscolar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Professor", "ProfessorTutor")
                        .WithMany("GrupsTutoritzats")
                        .HasForeignKey("IdProfessorTutor");

                    b.Navigation("AnyEscolar");

                    b.Navigation("ProfessorTutor");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Periode", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AnyEscolar", "AnyEscolar")
                        .WithMany("Periodes")
                        .HasForeignKey("IdAnyEscolar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnyEscolar");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Privilegi", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AnyEscolar", "AnyEscolar")
                        .WithMany("Privilegis")
                        .HasForeignKey("IdAnyEscolar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnyEscolar");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.PrivilegiAssignat", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AlumneEnGrup", "AlumneEnGrup")
                        .WithMany()
                        .HasForeignKey("IdAlumneEnGrup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Privilegi", "Privilegi")
                        .WithMany()
                        .HasForeignKey("IdPrivilegi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlumneEnGrup");

                    b.Navigation("Privilegi");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.ProfessorDeGrup", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AnyEscolar", "AnyEscolar")
                        .WithMany()
                        .HasForeignKey("IdAnyEscolar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Materia", "Materia")
                        .WithMany("ProfessorsDelGrup")
                        .HasForeignKey("IdMateria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Professor", "Professor")
                        .WithMany("ProfessorDeGrups")
                        .HasForeignKey("IdProfessor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Grup", "Grup")
                        .WithMany("ProfessorsDeGrup")
                        .HasForeignKey("IdAnyEscolar", "IdGrup")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AnyEscolar");

                    b.Navigation("Grup");

                    b.Navigation("Materia");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Puntuacio", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AlumneEnGrup", "AlumneEnGrup")
                        .WithMany("Puntuacions")
                        .HasForeignKey("IdAlumneEnGrup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria");

                    b.HasOne("KarmaWebAPI.Models.Periode", "Periode")
                        .WithMany("Puntuacions")
                        .HasForeignKey("IdPeriode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlumneEnGrup");

                    b.Navigation("Categoria");

                    b.Navigation("Periode");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.VPrivilegiPeriode", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.AlumneEnGrup", "AlumneEnGrup")
                        .WithMany()
                        .HasForeignKey("AlumneEnGrupIdAlumneEnGrup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Periode", "Periode")
                        .WithMany()
                        .HasForeignKey("PeriodeIdPeriode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.Privilegi", "Privilegi")
                        .WithMany()
                        .HasForeignKey("PrivilegiIdPrivilegi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlumneEnGrup");

                    b.Navigation("Periode");

                    b.Navigation("Privilegi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KarmaWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KarmaWebAPI.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Alumne", b =>
                {
                    b.Navigation("AlumneEnGrups");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.AlumneEnGrup", b =>
                {
                    b.Navigation("Puntuacions");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.AnyEscolar", b =>
                {
                    b.Navigation("AlumnesEnGrup");

                    b.Navigation("ConfiguracionsKarma");

                    b.Navigation("Grups");

                    b.Navigation("Periodes");

                    b.Navigation("Privilegis");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Grup", b =>
                {
                    b.Navigation("AlumnesEnGrup");

                    b.Navigation("ProfessorsDeGrup");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Materia", b =>
                {
                    b.Navigation("ProfessorsDelGrup");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Periode", b =>
                {
                    b.Navigation("Puntuacions");
                });

            modelBuilder.Entity("KarmaWebAPI.Models.Professor", b =>
                {
                    b.Navigation("GrupsTutoritzats");

                    b.Navigation("ProfessorDeGrups");
                });
#pragma warning restore 612, 618
        }
    }
}
